{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\nexports.getPattern = getPattern;\nexports.processPattern = processPattern;\nexports.addTrailingNumber = addTrailingNumber;\nvar _data = _interopRequireDefault(require(\"../data.json\"));\nvar _random = require(\"./random\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _default() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /* deprecations */\n  if (opts.numLen || opts.numLen === 0) {\n    console.log('namor: \"numLen\" is now deprecated, use \"numbers\" instead');\n    opts.numbers = opts.numLen;\n  }\n  /* generate the name */\n\n  var name = addTrailingNumber(processPattern(getPattern(opts.words), opts[\"char\"], opts.manly), opts.numbers, opts[\"char\"]);\n  /* ensure final subdomain isn't too long */\n\n  if (name.length > 63) {\n    throw new Error('Subdomains cannot be longer than 63 characters! Try shortening your trailing number.');\n  }\n  return name;\n}\n/**\n * Returns a language pattern based on the word count of the name.\n * @param {integer} words - the number of words to use\n * @return {array} a list (in order) of the language pattern\n */\n\nfunction getPattern() {\n  var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  words = parseInt(words, 10);\n  if (words < 1) {\n    throw new Error('word count must be above 0');\n  }\n  if (words > 4) {\n    throw new Error('word count cannot be above 4');\n  }\n  var pattern;\n  switch (words) {\n    case 1:\n      pattern = ['noun'];\n      break;\n    case 2:\n      pattern = (0, _random.randomFromArray)([['adjective', 'noun'], ['noun', 'verb']]);\n      break;\n    case 3:\n      pattern = ['adjective', 'noun', 'verb'];\n      break;\n    case 4:\n      pattern = ['adjective', 'noun', 'noun', 'verb'];\n      break;\n  }\n  return pattern;\n}\n/**\n * Fills a language pattern with actual words from our dictionary,\n * and turns it into a pipe-cased string.\n * @param {array} pattern - the pattern to use\n * @return {string} the concated string\n */\n\nfunction processPattern(pattern, _char, manly) {\n  var fills = pattern.map(function (type) {\n    var wordsToChooseFrom = manly ? _data[\"default\"].manly[\"\".concat(type, \"s\")] : _data[\"default\"][\"\".concat(type, \"s\")];\n    return (0, _random.randomFromArray)(wordsToChooseFrom);\n  });\n  return fills.join(_char || '-');\n}\n/**\n * Generates and adds a random number to the end of a name.\n * @param {string} name - the name to append to\n * @param {integer} len - the length of the trailing number\n * @return {string} the new name\n */\n\nfunction addTrailingNumber(name) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var _char2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';\n  len = parseInt(len, 10);\n  if (len < 0) {\n    throw new Error('number length must be above 0');\n  }\n  return name + (len ? _char2 + (0, _random.randomNumber)(len) : '');\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_default","getPattern","processPattern","addTrailingNumber","_data","_interopRequireDefault","require","_random","obj","__esModule","opts","arguments","length","undefined","numLen","console","log","numbers","name","words","manly","Error","parseInt","pattern","randomFromArray","_char","fills","map","type","wordsToChooseFrom","concat","join","len","_char2","randomNumber"],"sources":["/Users/ankurakke/personal/assignment/node_modules/namor/dist/generate.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\nexports.getPattern = getPattern;\nexports.processPattern = processPattern;\nexports.addTrailingNumber = addTrailingNumber;\n\nvar _data = _interopRequireDefault(require(\"../data.json\"));\n\nvar _random = require(\"./random\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _default() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /* deprecations */\n  if (opts.numLen || opts.numLen === 0) {\n    console.log('namor: \"numLen\" is now deprecated, use \"numbers\" instead');\n    opts.numbers = opts.numLen;\n  }\n  /* generate the name */\n\n\n  var name = addTrailingNumber(processPattern(getPattern(opts.words), opts[\"char\"], opts.manly), opts.numbers, opts[\"char\"]);\n  /* ensure final subdomain isn't too long */\n\n  if (name.length > 63) {\n    throw new Error('Subdomains cannot be longer than 63 characters! Try shortening your trailing number.');\n  }\n\n  return name;\n}\n/**\n * Returns a language pattern based on the word count of the name.\n * @param {integer} words - the number of words to use\n * @return {array} a list (in order) of the language pattern\n */\n\n\nfunction getPattern() {\n  var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  words = parseInt(words, 10);\n\n  if (words < 1) {\n    throw new Error('word count must be above 0');\n  }\n\n  if (words > 4) {\n    throw new Error('word count cannot be above 4');\n  }\n\n  var pattern;\n\n  switch (words) {\n    case 1:\n      pattern = ['noun'];\n      break;\n\n    case 2:\n      pattern = (0, _random.randomFromArray)([['adjective', 'noun'], ['noun', 'verb']]);\n      break;\n\n    case 3:\n      pattern = ['adjective', 'noun', 'verb'];\n      break;\n\n    case 4:\n      pattern = ['adjective', 'noun', 'noun', 'verb'];\n      break;\n  }\n\n  return pattern;\n}\n/**\n * Fills a language pattern with actual words from our dictionary,\n * and turns it into a pipe-cased string.\n * @param {array} pattern - the pattern to use\n * @return {string} the concated string\n */\n\n\nfunction processPattern(pattern, _char, manly) {\n  var fills = pattern.map(function (type) {\n    var wordsToChooseFrom = manly ? _data[\"default\"].manly[\"\".concat(type, \"s\")] : _data[\"default\"][\"\".concat(type, \"s\")];\n    return (0, _random.randomFromArray)(wordsToChooseFrom);\n  });\n  return fills.join(_char || '-');\n}\n/**\n * Generates and adds a random number to the end of a name.\n * @param {string} name - the name to append to\n * @param {integer} len - the length of the trailing number\n * @return {string} the new name\n */\n\n\nfunction addTrailingNumber(name) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  var _char2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';\n\n  len = parseInt(len, 10);\n\n  if (len < 0) {\n    throw new Error('number length must be above 0');\n  }\n\n  return name + (len ? _char2 + (0, _random.randomNumber)(len) : '');\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}